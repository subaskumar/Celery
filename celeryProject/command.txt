Command Reference
################

# Install celery
    pip install celery

#Install RabbitMQ (Ubuntu Linux 20.04LTS)
    sudo apt-get install rabbitmq-server

# Run Celery
    celery -A NAMEOFINSTANCE worker --loglevel=info

    celery -A core worker --loglevel=info

    [Windows OS]
    celery -A celeryProject worker -l info --pool=solo

# Run RabbitMQ (On Windows)

Run:
C:\Program Files\RabbitMQ Server\rabbitmq_server-3.8.6\sbin\rabbitmq-server.bat

#Run First Task
    py manage.py shell
    from task1.tasks import add
    add.delay(2, 2)

    or

    add.apply_async((2, 2), countdown=5)

#Useful commands
    #Show message on completion of task
        logger.info("Sent review email")



###############################
Working with Flower
===============================

Windows Work Around
#####
C:\django\yt-django-celery-series-intro-install-run-task\venv\lib\site-packages\tornado\platform\asyncio.py

import sys

if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

Start Flower
#####
flower -A celeryProject --port=5555


    <<===================================================================================================>>
        django-celery-beat
        ===============================

        **  for this following command line we can run the setting.py file tasks
            and also we can see the expected result in terminal of Celery and also in flower (after running flower command ).

        celery -A celeryProject beat -l INFO  # For deeper logs use DEBUG
        celery -A celeryProject worker -B -l INFO

        ** You can also embed beat inside the worker by enabling the workers -B option


        CELERY_BEAT_SCHEDULE = {
            "scheduled_task": {
                "task": "celeryApp.tasks.add",      # this tasks automatically extecuted by runnig the above command
                "schedule": 5.0,
                "args": (10, 100),
            },
            "database": {
                "task": "celeryApp.tasks.mul",
                "schedule": 5.0,
                "args": (10, 5),
            },
        }

        # and also we can store result in dataBase by adding this statement in setting.py file
        CELERY_RESULT_BACKEND = 'django-db'

    <<==========================================================================================>>



Database scheduler ( for this command we can run database scheduler tasks)
====================
celery -A celeryProject beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
###############################